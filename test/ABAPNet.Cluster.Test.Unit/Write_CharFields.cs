using ABAPNet.Cluster.Attributes;

namespace ABAPNet.Cluster.Test.Unit
{
    public class Write_CharFields
    {
        [Fact]
        public void Write_Char1_As_Type_Char()
        {
            DataBuffer dataBuffer = new DataBuffer();

            byte[] bufferExpected = {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x32, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x02, 0x20, 0x00, 0xBD, 0x04
            };

            var bufferActual = dataBuffer.Export(new ClusterWithChar1()
            {
                Field = ' '
            });

            Assert.Equal(bufferExpected, bufferActual);
        }

        [Fact]
        public void Write_Char3_As_Type_String_Empty()
        {
            DataBuffer dataBuffer = new DataBuffer();

            byte[] bufferExpected = {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
                0x00, 0x00, 0x36, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x06, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xBD, 0x04
            };

            var bufferActual = dataBuffer.Export(new ClusterWithChar3()
            {
                Field = string.Empty
            });

            Assert.Equal(bufferExpected, bufferActual);
        }

        [Fact]
        public void Write_Char4_As_Type_String_Empty()
        {
            DataBuffer dataBuffer = new DataBuffer();

            byte[] bufferExpected = {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
                0x00, 0x00, 0x38, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x08, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xBD,
                0x04
            };

            var bufferActual = dataBuffer.Export(new ClusterWithChar4()
            {
                Field = string.Empty
            });

            Assert.Equal(bufferExpected, bufferActual);
        }

        [Fact]
        public void Write_Char3_As_Type_String_With_More_Characters()
        {
            DataBuffer dataBuffer = new DataBuffer();

            byte[] bufferExpected = {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
                0x00, 0x00, 0x36, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x06, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xBD, 0x04
            };

            var bufferActual = dataBuffer.Export(new ClusterWithChar3()
            {
                Field = "   A"
            });

            Assert.Equal(bufferExpected, bufferActual);
        }

        [Fact]
        public void Write_Char4_As_Type_String_With_More_Characters()
        {
            DataBuffer dataBuffer = new DataBuffer();

            byte[] bufferExpected = {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
                0x00, 0x00, 0x38, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x08, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xBD,
                0x04
            };

            var bufferActual = dataBuffer.Export(new ClusterWithChar4()
            {
                Field = "    A"
            });

            Assert.Equal(bufferExpected, bufferActual);
        }

        private struct ClusterWithChar1
        {
            [ClusterFieldName("FIELD")]
            [Char(1)]
            public char Field { get; set; }
        }

        private struct ClusterWithChar3
        {
            [ClusterFieldName("FIELD")]
            [Char(3)]
            public string Field { get; set; }
        }

        private struct ClusterWithChar4
        {
            [ClusterFieldName("FIELD")]
            [Char(4)]
            public string Field { get; set; }
        }
    }
}
