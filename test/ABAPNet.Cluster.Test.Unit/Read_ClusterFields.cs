using ABAPNet.Cluster.Attributes;

namespace ABAPNet.Cluster.Test.Unit
{
    public class Read_ClusterFields
    {
        [Fact]
        public void Read_Cluster_With_Single_Field()
        {
            DataBuffer dataBuffer = new DataBuffer();

            var structExpected = new SingleClusterField();

            var structActual = dataBuffer.Import<SingleClusterField>(new byte[] {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0x34, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x04
            });

            Assert.Equal(structExpected, structActual);
        }

        [Fact]
        public void Read_Cluster_With_Multiple_Fields()
        {
            DataBuffer dataBuffer = new DataBuffer();

            var structExpected = new MultipleClusterFields();

            var structActual = dataBuffer.Import<MultipleClusterFields>(new byte[] {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0x36, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0x31, 0x00,
                0xBC, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x01, 0x08,
                0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x06, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x49, 0x00, 0x45, 0x00,
                0x4C, 0x00, 0x44, 0x00, 0x32, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0x00, 0xBD, 0x04
            });

            Assert.Equal(structExpected, structActual);
        }

        private struct SingleClusterField
        {
            [ClusterFieldName("FIELD")]
            [Int4]
            public int Field { get; set; }
        }

        private struct MultipleClusterFields
        {
            [ClusterFieldName("FIELD1")]
            [Int4]
            public int Field1 { get; set; }

            [ClusterFieldName("FIELD2")]
            [Int4]
            public int Field2 { get; set; }
        }
    }
}
