using ABAPNet.Cluster.Attributes;
namespace ABAPNet.Cluster.Test.Unit
{
    public class Read_FloatFields
    {
        [Fact]
        public void Read_Float_From_Double()
        {
            DataBuffer dataBuffer = new DataBuffer();

            var structExpected = new ClusterWithFloatAsDouble()
            {
                Field = 12345.12345d
            };

            var structActual = dataBuffer.Import<ClusterWithFloatAsDouble>(new byte[] {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
                0x00, 0x00, 0x38, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x08, 0x58, 0xA8, 0x35, 0xCD, 0x8F, 0x1C, 0xC8, 0x40, 0xBD,
                0x04
            });

            Assert.Equal(structExpected.Field, structActual.Field);
        }

        [Fact]
        public void Read_Float_From_Float()
        {
            DataBuffer dataBuffer = new DataBuffer();

            var structExpected = new ClusterWithFloatAsFloat()
            {
                Field = 123.12345f
            };

            var structActual = dataBuffer.Import<ClusterWithFloatAsFloat>(new byte[] {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
                0x00, 0x00, 0x38, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x46, 0x00, 0x49, 0x00, 0x45, 0x00, 0x4C, 0x00, 0x44, 0x00, 0xBC, 0x00,
                0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xA0, 0xE6, 0xC7, 0x5E, 0x40, 0xBD,
                0x04
            });

            Assert.Equal(structExpected.Field, structActual.Field);
        }

        private class ClusterWithFloatAsDouble
        {
            [ClusterFieldName("FIELD")]
            [Float]
            public double Field { get; set; }
        }

        private class ClusterWithFloatAsFloat
        {
            [ClusterFieldName("FIELD")]
            [Float]
            public float Field { get; set; }
        }
    }
}
