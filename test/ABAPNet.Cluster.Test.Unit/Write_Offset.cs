using ABAPNet.Cluster.Attributes;

namespace ABAPNet.Cluster.Test.Unit
{
    public class Write_Offset
    {
        [Fact]
        public void Write_Struct_With_Offset()
        {
            DataBuffer dataBuffer = new DataBuffer();

            byte[] bufferExpected = {
                0xFF, 0x06, 0x02, 0x01, 0x01, 0x02, 0x80, 0x00, 0x34, 0x31, 0x30, 0x33,
                0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00,
                0x00, 0x00, 0xA9, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x53, 0x00, 0x54, 0x00, 0x52, 0x00, 0x55, 0x00, 0x43, 0x00, 0x54, 0x00,
                0xAB, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x28, 0xAA, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x02, 0xAB, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xAA, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x10, 0xAA, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xAC,
                0x0E, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xAF, 0x04, 0x00, 0x00, 0x00, 0x00,
                0x02, 0xAD, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0xAA, 0x08, 0x00, 0x00,
                0x00, 0x00, 0x04, 0xAE, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0xAC, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x28, 0xBC, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00,
                0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
                0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
                0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0xBD, 0xBE, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x00, 0x00, 0x00, 0xBF, 0x04
            };

            var bufferActual = dataBuffer.Export(new Cluster()
            {
                Field = new Structure
                {
                    Field1 = ' ',
                    Table1 = new int[] { }
                }
            });

            Assert.Equal(bufferExpected, bufferActual);
        }

        private class Cluster
        {
            [ClusterFieldName("STRUCT")]
            [DeepStruct]
            public Structure Field { get; set; }
        }

        private struct Structure
        {
            [Char(1)]
            public char Field1 { get; set; }

            [FlatStruct]
            public DateTimeStruct Struct1 { get; set; }

            [Int4Table]
            public int[] Table1 { get; set; }
        }

        private struct DateTimeStruct
        {
            [Dats]
            public DateOnly Date { get; set; }

            [Tims]
            public TimeOnly Time { get; set; }
        }
    }
}
